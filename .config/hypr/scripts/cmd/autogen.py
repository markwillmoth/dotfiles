import os
import sys
from argparse import ArgumentParser, Namespace
from pathlib import Path
from typing import Optional, TextIO

from lib.arg_types import bounded_int
from lib.constants import AUTOGEN_CONF_DIR
from lib.monitor import get_all_monitors


def add_arguments(parser: ArgumentParser):
    parser.add_argument(
        "--workspaces", action="store_true", help="generate workspace config"
    )

    parser.add_argument(
        "--workspace-count",
        type=bounded_int(1, 20),
        help="amount of workspaces to generate",
        default=10,
    )

    parser.add_argument("--write", action="store_true", help="write files generated")


_current_path = Path(__file__).resolve()
_display_path = str(_current_path).replace(str(Path.home()), "~")


def add_header_comment(output: TextIO):
    output.write(f"#Autogenerated by hyprcmd {_display_path}\n\n")


def bind(
    key: str | int,
    modifier: Optional[str],
    command: str,
    is_hyprcmd: bool = True,
    new_line: bool = True,
) -> str:
    if is_hyprcmd:
        command = f"$hyprcmd {command}"

    if modifier:
        modifier = f"$mod {modifier}"
    else:
        modifier = "$mod"

    line = f"bind = {modifier}, {key}, exec, {command}"
    if new_line:
        line = f"{line}\n"
    return line


def workspaces(write_to_file: bool, workspace_count: int):
    file_path = os.path.join(AUTOGEN_CONF_DIR, "01_workspaces.conf")
    if not write_to_file:
        print(file_path)

    output = open(file_path, "w") if write_to_file else sys.stdout

    add_header_comment(output)

    for mi, monitor in enumerate(get_all_monitors()):
        for wi in range(0, workspace_count):
            workspace_id = (mi * workspace_count) + wi + 1
            line = f"workspace={workspace_id},monitor:{
                monitor.name},persistent:1"
            if wi == 0:
                line = f"{line},default:1"

            output.write(f"{line}\n")

    if write_to_file:
        output.close()


def workspace_keybinds(write_to_file: bool, workspace_count: int):
    file_path = os.path.join(AUTOGEN_CONF_DIR, "02_workspace_keybinds.conf")
    output = open(file_path, "w") if write_to_file else sys.stdout

    add_header_comment(output)

    output.write("# Mouse wheel controls\n")
    output.write(bind("mouse_up", None, "change_workspace --next"))
    output.write(bind("mouse_down", None, "change_workspace --prev"))

    output.write("# Keyboard controls\n")
    output.write(bind("tab", "SHIFT", "change_workspace --next"))
    output.write(bind("return", "SHIFT", "change_workspace --prev"))

    items = [
        ["# Switch to workspace"],
        ["# Move to workspace"],
        ["# Move to workspace without changing current workspace"],
    ]

    for i in range(1, min(10, workspace_count) + 1):
        key = i if i < 10 else 0
        items[0].append(
            bind(key, None, f"change_workspace --workspace {i}", new_line=False)
        )
        items[1].append(
            bind(key, "SHIFT", f"move_to_workspace --workspace {i}", new_line=False)
        )
        items[2].append(
            bind(
                key,
                "ALT",
                f"move_to_workspace --workspace {i} --silent",
                new_line=False,
            )
        )

    for item in items:
        for line in item:
            output.write(f"{line}\n")
        output.write("\n")

    if write_to_file:
        output.close()


def exec_cmd(args: Namespace):
    if args.workspaces:
        workspaces(args.write, args.workspace_count)
        workspace_keybinds(args.write, args.workspace_count)
